# Django-Friendface

Django-friendface is a django application for interacting with Facebook. The
goal is to have a complete implementation Facebook's API's in a django centric
fashion and to support projects that have multiple Facebook Applications.

## Contextual

* Is contextual and knows which application should be used with the currrent
request.
* Auto-create Django users on auth.
* Disables CSRF forgery on canvas URL's
* Sends P3P headers.


# Setup

    INSTALLED_APPS += ('friendface',)

    MIDDLEWARE_CLASSES = (
        'friendface.middleware.FacebookMiddleware',
        ...
    )

    AUTHENTICATION_BACKENDS += ('friendface.auth.backends.FacebookBackend',)

    Each application you want to use you need to setup in the django admin.
    Once saved the application will request all of its details from Facebook.


# Usage

## Django

django-friendface is attaches a facebook property to your request object.

### request.facebook.application

The facebook application for this request.

### request.facebook.user

The facebook user.

### request.facebook.request

The decoded signed request.

### request.facebook.page

FacebookPage instance.

## Templates

    {% load facebook %}

    <a href="{% fburl 'my_app.views.index' %}">My view on Facebook!</a>


#### To run test suite
friendface is prepared for testing both it's Javascript and Python components.
Simply ensure that you got all Python requirements installed and that you
got a recent version of node.js with npm installed. Then simply type:

$ make test

If necessary npm will install requirements for phantom.js.

## Mobile detection

If the request has `mobile` set to `True` then the
`FacebookAppAuthMixin` will act like `MobileView` and set the current
session as Facebook mobile. This means that when the user access the
app on http://apps.facebook.com then the user will be redirected to
the bare domain of the app. The current normal workflow goes like:

- Facebook Tab app needs authorization
- Creates an authorization request and then sends the user to
  http://apps.facebook.com
- If the user is using a mobile phone it'll now try to redirect to the
  bare domain, otherwise display it inline according to the
  configured canvas url.
- If the mobile detection middleware has been installed the redirect will
  instead go to the same url as for mobile phones

To get detection install a mobile detection middleware and make sure
it marks the as `mobile = True`.

### Recommended mobile detection middleware

Install [django-mobi](https://pypi.python.org/pypi/django-mobi/) and
add it's middleware to our settings:

    MIDDLEWARE_CLASSES += (
        'mobi.middleware.MobileDetectionMiddleware'
    )
